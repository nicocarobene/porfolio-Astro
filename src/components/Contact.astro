---
import { getI18N } from "@/i18n";
const { currentLocale } = Astro;
const i18n = getI18N({ currentLocale });
---

<form class="max-w-2xl w-full mx-auto flex flex-col gap-4" id="contact-form">
  <fieldset>
    <label
      for="name"
      class="block mb-2 text-sm font-medium text-white dark:text-white"
      >{i18n.CONTACT.NAME_FIELD.LABEL}</label
    >
    <div class="flex">
      <span
        class="inline-flex items-center px-3 text-sm text-white bg-gray-200 border border-e-0 border-gray-300 rounded-s-md dark:bg-gray-600 dark:text-gray-400 dark:border-gray-600"
      >
        <svg
          class="w-4 h-4 text-gray-500 dark:text-gray-400"
          aria-hidden="true"
          fill="currentColor"
          viewBox="0 0 20 20"
        >
          <path
            d="M10 0a10 10 0 1 0 10 10A10.011 10.011 0 0 0 10 0Zm0 5a3 3 0 1 1 0 6 3 3 0 0 1 0-6Zm0 13a8.949 8.949 0 0 1-4.951-1.488A3.987 3.987 0 0 1 9 13h2a3.987 3.987 0 0 1 3.951 3.512A8.949 8.949 0 0 1 10 18Z"
          ></path>
        </svg>
      </span>
      <input
        type="text"
        id="name"
        name="name"
        value=""
        class="rounded-none rounded-e-lg bg-gray-50 border border-gray-300 text-white focus:ring-blue-500 focus:border-blue-500 block flex-1 min-w-0 w-full text-sm p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
        placeholder={i18n.CONTACT.NAME_FIELD.PLACEHOLDER}
      />
    </div>
  </fieldset>
  <fieldset>
    <label
      for="email"
      class="block mb-2 text-sm font-medium text-white dark:text-white"
      >{i18n.CONTACT.EMAIL_FIELD.LABEL}</label
    >
    <div class="flex">
      <span
        class="inline-flex items-center px-3 text-sm text-white bg-gray-200 border border-e-0 border-gray-300 rounded-s-md dark:bg-gray-600 dark:text-gray-400 dark:border-gray-600"
      >
        <svg
          class="w-4 h-4 text-gray-500 dark:text-gray-400"
          aria-hidden="true"
          xmlns="http://www.w3.org/2000/svg"
          fill="currentColor"
          viewBox="0 0 20 16"
        >
          <path
            d="m10.036 8.278 9.258-7.79A1.979 1.979 0 0 0 18 0H2A1.987 1.987 0 0 0 .641.541l9.395 7.737Z"
          ></path>
          <path
            d="M11.241 9.817c-.36.275-.801.425-1.255.427-.428 0-.845-.138-1.187-.395L0 2.6V14a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V2.5l-8.759 7.317Z"
          ></path>
        </svg>
      </span>
      <input
        type="email"
        id="email"
        name="email"
        value=""
        class="rounded-none rounded-e-lg bg-gray-50 border border-gray-300 text-white focus:ring-blue-500 focus:border-blue-500 block flex-1 min-w-0 w-full text-sm p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
        placeholder={i18n.CONTACT.EMAIL_FIELD.PLACEHOLDER}
      />
    </div>
  </fieldset>
  <label
    for="message"
    class="block mt-2 text-sm font-medium text-white dark:text-white"
    >{i18n.CONTACT.TEXTAREA_FIELD.LABEL}</label
  >
  <textarea
    id="message"
    rows="6"
    name="message"
    class="block resize-none p-2.5 w-full text-sm text-white bg-gray-50 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
    placeholder={i18n.CONTACT.TEXTAREA_FIELD.PLACEHOLDER}></textarea>
  <button
    type="submit"
    class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
    >{i18n.CONTACT.BUTTON_SUBMIT}</button
  >
</form>
<article>
  <div
    id="toastSuccess"
    class="w-full p-4 mb-4 text-sm text-green-800 bg-green-100 rounded-lg dark:bg-green-200 dark:text-green-800 absolute animate-fade-up hidden"
    role="alert"
  >
    <span class="font-medium">{i18n.CONTACT.ALERT_SUCCESS.SPAN}</span>{
      i18n.CONTACT.ALERT_SUCCESS.PARRAFO
    }
  </div>
</article>
<article>
  <div
    id="toastFail"
    class="w-full p-4 mb-4 text-sm text-red-800 bg-red-100 rounded-lg dark:bg-red-200 dark:text-red-800 absolute animate-fade-up hidden"
    role="alert"
  >
    <span class="font-medium">{i18n.CONTACT.ALERT_ERROR.SPAN}</span>
    {i18n.CONTACT.ALERT_ERROR.PARRAFO}
  </div>
</article>
<script>
  const form = document.querySelector("#contact-form") as HTMLFormElement;
  const toastFail = document.querySelector("#toastFail") as HTMLDivElement;

  function validateEntryForm({
    name,
    email,
    message,
  }: {
    name: FormDataEntryValue;
    email: FormDataEntryValue;
    message: FormDataEntryValue;
  }) {
    const nameString = name.toString().trim();
    const emailString = email.toString().trim();
    const messageString = message.toString().trim();
    if (!nameString || !emailString || !messageString) {
      return false;
    }
    return true;
  }

  function incorrectFields(forField?: boolean) {
    console.log(forField);
    if (forField) {
      const previusContent = toastFail.innerHTML;
      toastFail.innerHTML = "Please fill out all fields";
      toastFail?.classList.remove("hidden");
      setTimeout(() => {
        toastFail?.classList.add("hidden");
        toastFail.innerHTML = previusContent;
      }, 3000);
      return;
    }
    toastFail?.classList.remove("hidden");
    setTimeout(() => {
      toastFail?.classList.add("hidden");
    }, 3000);
  }

  form?.addEventListener("submit", (e) => {
    e.preventDefault();
    const formData = new FormData(form);

    const { name, email, message } = Object.fromEntries(formData);
    const validateForm = validateEntryForm({ name, email, message });
    if (!validateForm) {
      incorrectFields(true);
      return;
    }
    fetch("/api/contact", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ name, email, message }),
    }).then((res) => {
      if (!res.ok) {
        incorrectFields();
        throw new Error("Failed to send message");
      }
      const toast = document.querySelector("#toastSuccess") as HTMLDivElement;
      toast?.classList.remove("hidden");
      setTimeout(() => {
        toast?.classList.add("hidden");
      }, 3000);
    });

    form.reset();
  });
</script>
